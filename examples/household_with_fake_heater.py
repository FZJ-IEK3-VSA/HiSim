""" Shows a household with a fake heating to test the heating demand generated by building. """
# clean
from typing import Optional, Any
from hisim.simulator import SimulationParameters
from hisim.components import loadprofilegenerator_connector
from hisim.components import weather
from hisim.components import building
from hisim import component
from hisim.loadtypes import LoadTypes, Units
from hisim import log

__authors__ = "Maximilian Hillen"
__copyright__ = "Copyright 2021-2022, FZJ-IEK-3"
__credits__ = ["Noah Pflugradt"]
__license__ = "MIT"
__version__ = "1.0"
__maintainer__ = "Noah Pflugradt"
__status__ = "development"

# =========================================================================================================================================================
# Build Fake Heating Component Class


class FakeHeater(component.Component):

    # Inputs
    TemperatureInput = "TemperatureInput"
    # Outputs
    ThermalDelivery = "ThermalDelivery"

    def __init__(self, my_simulation_parameters: SimulationParameters) -> None:
        super().__init__(
            name="FakeHeaterComponent",
            my_simulation_parameters=my_simulation_parameters,
        )
        # Input
        self.input_temperature_channel: component.ComponentInput = self.add_input(
            self.component_name,
            self.TemperatureInput,
            LoadTypes.TEMPERATURE,
            Units.CELSIUS,
            mandatory=True,
        )
        # Output
        self.fake_thermal_power_delivered_output_channel: component.ComponentOutput = (
            self.add_output(
                object_name=self.component_name,
                field_name=self.ThermalDelivery,
                load_type=LoadTypes.HEATING,
                unit=Units.WATT,
            )
        )

        self.fake_thermal_output_in_watt: float = 0
        self.fake_thermal_output_sum: float = 0
        self.input_temperture_in_celsius: float = 0
        self.day: int = 0
        self.heating_days: list = []

    def i_save_state(self) -> None:
        pass

    def i_restore_state(self) -> None:
        pass

    def i_prepare_simulation(self) -> None:
        pass

    def i_doublecheck(
        self, timestep: int, stsv: component.SingleTimeStepValues
    ) -> None:
        pass

    def i_simulate(
        self,
        timestep: int,
        stsv: component.SingleTimeStepValues,
        force_convergence: bool,
    ) -> None:
        self.input_temperture_in_celsius = stsv.get_input_value(
            self.input_temperature_channel
        )
        #log.information("input temp [Â°C] " + str(self.input_temperture_in_celsius))
        self.fake_thermal_output_in_watt = 0
        if self.input_temperture_in_celsius < 20:
            self.fake_thermal_output_in_watt = 10
            self.heating_days.append(self.day)

        # log.information("heating days " + str(set(self.heating_days)))

        stsv.set_output_value(
            self.fake_thermal_power_delivered_output_channel,
            self.fake_thermal_output_in_watt,
        )
        self.fake_thermal_output_sum += self.fake_thermal_output_in_watt
        #log.information("fake thermal output per iteration " +str(self.fake_thermal_output_in_watt))
        # log.information("fake thermal output sum " + str(self.fake_thermal_output_sum))


            
        self.day = int(timestep / (60*24))
        #log.information("timestep and day " + str(timestep) + " " + str(self.day))

    def write_to_report(self):
        lines = []
        lines.append(f"Name Heater: {self.component_name}")
        lines.append(f"Heating Output Sum [kW]: {self.fake_thermal_output_sum / 1000}")
        lines.append(f"Heating Days : {len(set(self.heating_days))}")
        return lines


# =========================================================================================================================================================
def household_fake_heating(
    my_sim: Any, my_simulation_parameters: Optional[SimulationParameters] = None
) -> None:
    """Household with a fake heating.

    - Simulation Parameters
    - Components
        - Occupancy (Residents' Demands)
        - Weather
        - Fake Heater
    """
    # =========================================================================================================================================================
    # Set System Parameters

    # Set Simulation Parameters
    year = 2019
    seconds_per_timestep = 60

    # =========================================================================================================================================================
    # Build Components

    # Build Simulation Parameters
    if my_simulation_parameters is None:
        my_simulation_parameters = SimulationParameters.full_year_all_options(
            year=year, seconds_per_timestep=seconds_per_timestep
        )
    my_sim.set_simulation_parameters(my_simulation_parameters)

    # Build occupancy
    my_occupancy = loadprofilegenerator_connector.Occupancy(
        config=loadprofilegenerator_connector.OccupancyConfig.get_default_CHS01(),
        my_simulation_parameters=my_simulation_parameters,
    )

    # Build Weather
    my_weather = weather.Weather(
        config=weather.WeatherConfig.get_default(weather.LocationEnum.Aachen),
        my_simulation_parameters=my_simulation_parameters,
    )

    # Build Building
    my_building = building.Building(
        config=building.BuildingConfig.get_default_german_single_family_home(),
        my_simulation_parameters=my_simulation_parameters,
    )

    # Build Fake Heater from Fake Heater Class
    my_fake_heater = FakeHeater(my_simulation_parameters=my_simulation_parameters)

    # =========================================================================================================================================================
    # Connect Inputs
    my_building.connect_only_predefined_connections(my_weather, my_occupancy)
    my_building.connect_input(
        my_building.ThermalEnergyDelivered,
        my_fake_heater.component_name,
        my_fake_heater.ThermalDelivery,
    )

    my_fake_heater.connect_input(
        my_fake_heater.TemperatureInput,
        my_building.component_name,
        my_building.TemperatureMean,
    )
    # =========================================================================================================================================================
    # Add Components to Simulation
    my_sim.add_component(my_building)
    my_sim.add_component(my_weather)
    my_sim.add_component(my_occupancy)
    my_sim.add_component(my_fake_heater)

    # =========================================================================================================================================================
    # This part is for testing the building heating demand
    tabula_conditioned_floor_area_in_m2 = my_building.buildingdata["A_C_Ref"].values[0]
    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Check values from TABULA
    # in tabula energy need for heating is given as q_h_nd, it is related to the conditioned floor area
    q_h_nd_given_directly_from_tabula_in_kWh_per_m2_per_year = my_building.buildingdata[
        "q_h_nd"
    ].values[0]

    # log.information(
    #     "Tabula Q-h-nd [kWh/m2.a] " + str(q_h_nd_given_directly_from_tabula_in_kWh_per_m2_per_year)
    # )
    # # Tabula formular for energy need for heating is given by q_h_nd = q_ht - eta_h_gn * (q_sol + q_int)
    # log.information("after simulation run:")
    # for i in my_sim.all_outputs:
    #     i = i.get_pretty_name()
    #     log.information("all outputs " + str(i))

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Compare Fake Thermal delivery (Q_h_nd, fake) with Q_h_nd, from tabula

    # np.testing.assert_allclose(
    #     q_h_nd_given_directly_from_tabula_in_kWh_per_m2_per_year,
    #     my_fake_heater.fake_thermal_output_in_watt,
    #     rtol=0.1,
    # )
