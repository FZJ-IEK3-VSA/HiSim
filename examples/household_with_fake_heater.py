""" Shows a household with a fake heating to test the heating demand generated by building. """
# clean
from typing import Optional, Any
from hisim.simulator import SimulationParameters
from hisim.components import loadprofilegenerator_connector
from hisim.components import weather
from hisim.components import building
from hisim import component
from hisim.loadtypes import LoadTypes, Units
from hisim import log
from tests import functions_for_testing as fft

__authors__ = "Maximilian Hillen"
__copyright__ = "Copyright 2021-2022, FZJ-IEK-3"
__credits__ = ["Noah Pflugradt"]
__license__ = "MIT"
__version__ = "1.0"
__maintainer__ = "Noah Pflugradt"
__status__ = "development"


def household_fake_heating(my_sim: Any, my_simulation_parameters: Optional[SimulationParameters] = None) -> None:
    """ Gas heater + buffer storage.

    This setup function emulates an household including
    the basic components. Here the residents have their
    heating needs covered by a gas heater and a heating
    water storage. The controller_l2_ems controls according
    to the storage tempreature the gas heater.

    - Simulation Parameters
    - Components
        - Occupancy (Residents' Demands)
        - Weather
        - GasHeater
        - HeatingStorage
        - Controller2EMS
    """

    # System Parameters #

    # Set simulation parameters
    year = 2021
    seconds_per_timestep = 60

    # Build Components #

    # Build system parameters
    if my_simulation_parameters is None:
        my_simulation_parameters = SimulationParameters.full_year_all_options(year=year, seconds_per_timestep=seconds_per_timestep)
    my_sim.set_simulation_parameters(my_simulation_parameters)
    repo = component.SimRepository()
    # Build occupancy
    my_occupancy = loadprofilegenerator_connector.Occupancy(config=loadprofilegenerator_connector.OccupancyConfig.get_default_CHS01(),
                                                            my_simulation_parameters=my_simulation_parameters)

    # Build Weather
    my_weather = weather.Weather(config=weather.WeatherConfig.get_default(weather.LocationEnum.Aachen),
                                 my_simulation_parameters=my_simulation_parameters)

 
    # Build Building
    my_building = building.Building(config=building.BuildingConfig.get_default_german_single_family_home(),
                                    my_simulation_parameters=my_simulation_parameters)

    # Build Fake Heating
    # Fake power delivered component 
    fake_heater = component.Component(name= "FakeHeaterComponent", my_simulation_parameters=my_simulation_parameters)
    fake_heater.set_sim_repo(repo)
    fake_heater = fake_heater.i_prepare_simulation()
    fake_thermal_power_delivered_output_channel = fake_heater.add_output(object_name=fake_heater.component_name, field_name="ThermalDelivery", load_type=LoadTypes.HEATING, unit=Units.WATT)

    # -------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Set stsv
    number_of_outputs = fft.get_number_of_outputs(
        [
            my_occupancy,
            my_weather,
            my_building,
            fake_thermal_power_delivered_output_channel,
        ]
    )

    stsv: component.SingleTimeStepValues = component.SingleTimeStepValues(
        number_of_outputs
    )
    # Connect Inputs
    my_building.connect_only_predefined_connections(my_weather, my_occupancy)
    my_building.connect_input(my_building.ThermalEnergyDelivered, fake_heater.component_name,fake_thermal_power_delivered_output_channel.field_name)

    my_building.thermal_power_delivered_channel.source_output = (
        fake_thermal_power_delivered_output_channel
    )

    fft.add_global_index_of_components(
        [
            my_occupancy,
            my_weather,
            my_building,
            fake_thermal_power_delivered_output_channel,
        ]
    )

    log.information(
        "fake thermal power delivered Q_H_nd [W]  "
        + str(stsv.values[fake_thermal_power_delivered_output_channel.global_index])
        + "\n"
    )

    stsv.values[fake_thermal_power_delivered_output_channel.global_index] = 0

    my_sim.add_component(my_building)
    my_sim.add_component(my_weather)
    my_sim.add_component(my_occupancy)
    my_sim.add_component(fake_heater)
